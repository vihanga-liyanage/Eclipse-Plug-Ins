/*
 * generated by Xtext 2.11.0
 */
grammar InternalStudent;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.wso2.vihanga.example.student.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.wso2.vihanga.example.student.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.wso2.vihanga.example.student.services.StudentGrammarAccess;

}
@parser::members {
	private StudentGrammarAccess grammarAccess;

	public void setGrammarAccess(StudentGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getStudentsAssignment()); }
		(rule__Model__StudentsAssignment)*
		{ after(grammarAccess.getModelAccess().getStudentsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStudent
entryRuleStudent
:
{ before(grammarAccess.getStudentRule()); }
	 ruleStudent
{ after(grammarAccess.getStudentRule()); } 
	 EOF 
;

// Rule Student
ruleStudent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStudentAccess().getGroup()); }
		(rule__Student__Group__0)
		{ after(grammarAccess.getStudentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddress
entryRuleAddress
:
{ before(grammarAccess.getAddressRule()); }
	 ruleAddress
{ after(grammarAccess.getAddressRule()); } 
	 EOF 
;

// Rule Address
ruleAddress 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddressAccess().getGroup()); }
		(rule__Address__Group__0)
		{ after(grammarAccess.getAddressAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Student__Group__0__Impl
	rule__Student__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStudentAccess().getStudentKeyword_0()); }
	'Student'
	{ after(grammarAccess.getStudentAccess().getStudentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Student__Group__1__Impl
	rule__Student__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStudentAccess().getIdAssignment_1()); }
	(rule__Student__IdAssignment_1)
	{ after(grammarAccess.getStudentAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Student__Group__2__Impl
	rule__Student__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStudentAccess().getNameAssignment_2()); }
	(rule__Student__NameAssignment_2)
	{ after(grammarAccess.getStudentAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Student__Group__3__Impl
	rule__Student__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStudentAccess().getAgeAssignment_3()); }
	(rule__Student__AgeAssignment_3)
	{ after(grammarAccess.getStudentAccess().getAgeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Student__Group__4__Impl
	rule__Student__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStudentAccess().getAddressAssignment_4()); }
	(rule__Student__AddressAssignment_4)
	{ after(grammarAccess.getStudentAccess().getAddressAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Student__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStudentAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getStudentAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Address__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__0__Impl
	rule__Address__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getAddressKeyword_0()); }
	'Address'
	{ after(grammarAccess.getAddressAccess().getAddressKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__1__Impl
	rule__Address__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAddressAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__2__Impl
	rule__Address__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getStreetAddressKeyword_2()); }
	'StreetAddress'
	{ after(grammarAccess.getAddressAccess().getStreetAddressKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__3__Impl
	rule__Address__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getStreetAddressAssignment_3()); }
	(rule__Address__StreetAddressAssignment_3)
	{ after(grammarAccess.getAddressAccess().getStreetAddressAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__4__Impl
	rule__Address__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getAddressAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__5__Impl
	rule__Address__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getCityKeyword_5()); }
	'City'
	{ after(grammarAccess.getAddressAccess().getCityKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__6__Impl
	rule__Address__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getCityAssignment_6()); }
	(rule__Address__CityAssignment_6)
	{ after(grammarAccess.getAddressAccess().getCityAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__7__Impl
	rule__Address__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getCommaKeyword_7()); }
	','
	{ after(grammarAccess.getAddressAccess().getCommaKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__8__Impl
	rule__Address__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getPostalCodeKeyword_8()); }
	'PostalCode'
	{ after(grammarAccess.getAddressAccess().getPostalCodeKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__9__Impl
	rule__Address__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getPostalCodeAssignment_9()); }
	(rule__Address__PostalCodeAssignment_9)
	{ after(grammarAccess.getAddressAccess().getPostalCodeAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Address__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddressAccess().getRightCurlyBracketKeyword_10()); }
	'}'
	{ after(grammarAccess.getAddressAccess().getRightCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__StudentsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStudentsStudentParserRuleCall_0()); }
		ruleStudent
		{ after(grammarAccess.getModelAccess().getStudentsStudentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStudentAccess().getIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStudentAccess().getIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStudentAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getStudentAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__AgeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStudentAccess().getAgeINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getStudentAccess().getAgeINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__AddressAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStudentAccess().getAddressAddressParserRuleCall_4_0()); }
		ruleAddress
		{ after(grammarAccess.getStudentAccess().getAddressAddressParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__StreetAddressAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddressAccess().getStreetAddressSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getAddressAccess().getStreetAddressSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__CityAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddressAccess().getCitySTRINGTerminalRuleCall_6_0()); }
		RULE_STRING
		{ after(grammarAccess.getAddressAccess().getCitySTRINGTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__PostalCodeAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddressAccess().getPostalCodeINTTerminalRuleCall_9_0()); }
		RULE_INT
		{ after(grammarAccess.getAddressAccess().getPostalCodeINTTerminalRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
